<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
    />
    <link rel="stylesheet" href="/stylesheets/summary.css" />
    <link rel="stylesheet" href="/stylesheets/flashcards.css" />
    <script defer src="../javascripts/script.js"></script>
    <title>Document</title>
  </head>
  <body>
    <header>
      <nav>
        <a href="/summary"
          ><span class="material-symbols-outlined"> arrow_back_ios </span
          ><span class="material-symbols-outlined"> empty_dashboard </span></a
        >
        <h1><%=deck.name%></h1>
        <span class="material-symbols-outlined"> logout </span>
      </nav>
    </header>
    <div class="display-container">
      <a href="/decks/<%=deck._id%>/flashcards/new"
        ><button class="show-deck-btns">Add Card to Deck</button></a
      >
      <table>
        <thead>
          <tr>
            <th>Cards Due:</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>#</td>
          </tr>
        </tbody>
      </table>
      <button class="study-now-btn">Study Now</button>
    </div>
    <main>
      <div class="show-container">
        <!-- takes first card in queue -->
        <div class="front-container" style="display: none"></div>
        <!-- back container display set to none -->

      </div>
    </main>
    <main>
      <div class="back-container" style="display: none"></div>
      <div class="post-reveal" style="display: none">
        <!-- onclick should trigger function to resort card in queue -->
        <div class="again post"><button type="submit">Again</button></div>
        <div class="hard post"><button type="submit">Hard</button></div>
        <div class="good post"><button type="submit">Good</button></div>
        <div class="easy post"><button type="submit">Easy</button></div>
      </div>
      <div class="options-container">
        <div class="reveal" style="display: none"><button>Show Answer</button></div>
      </div>
    </main>
    <script>
      // constants

      //states
      let counter = 0
      // event listeners

      const studyNow = document.querySelector(".study-now-btn")
      const showAnswer = document.querySelector(".reveal")
      const postReveal = document.querySelector(".post-reveal")
      const difficultyBtns = document.getElementsByClassName("post")
      const frontContainer = document.querySelector(".front-container")
      const backContainer = document.querySelector(".back-container")
      const displayContainer = document.querySelector(".display-container")

      async function getData(deckID) {
        let cards;
        try {
          const endpoint = "/api/flashcards/" + deckID;
          // let flashcards = await fetch(endpoint).then((res) => res.json());
          let flashcards = await fetch(endpoint).then((res) =>
            res.json().then((data) => {
              // console.log(data)
            cards = data;
            //render functionality
              showCard()
            studyNow.addEventListener("click", function (){
              if (frontContainer.style.display === "none"){
                frontContainer.style.display = "flex"
                displayContainer.style.display = "none"
                showAnswer.style.display = "flex"
              }
              frontContainer.textContent = cards.dueCards[counter] // getting [object Object]
              backContainer.textContent = cards.dueCards[counter]
            })
            showAnswer.addEventListener("click", function (){
              console.log("clicked")
              if (postReveal.style.display === "none" && backContainer.style.display === "none"){
                postReveal.style.display = "flex"
                backContainer.style.display = "flex"
                showAnswer.style.display = "none"
              }
            })

            for (let i = 0; i < difficultyBtns.length; i++) {

              } 
            })
          );
        } catch (err) {
          console.log(err);
        }


        console.log(cards);
      }
      var s = <%- JSON.stringify(deckID); %>
      getData(s);




      // STEP 1
      // function show card at index 0 of due cards
      function showCard(){

      }
      function showBack(){

      }
      function updateCard(){}
      //onclick of options buttons:
      // increment counter until it is longer than due array, then set back to 0
      // show next card in array
      // call render function

      // build render function

      // STEP 2:
      // logic for update functionality - changing due values

      //STEP 3:
      // adding logic for what happens when i hit the end of the array
    </script>
  </body>
</html>
